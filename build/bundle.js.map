{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/controller.js","src/js/main.js","src/js/model.js","src/js/routes.js","src/js/service.js","src/js/template.js","src/js/util.js","src/js/view.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* jshint esversion:6, devel: true */\n\nexport default class Controller {\n    \n    constructor(model, view) {\n        this.model = model;\n        this.view  = view;\n    }\n    \n    render(data) {\n        this.view.render(data);\n    }\n    \n    setView(hash) {\n        \n//        console.log('setView fired. Hash: ', hash);\n        \n        this.model.getGalleries()\n            .then( data => this.render(data) );\n        \n    }\n    \n}","/* jshint esversion:6, browser:true */\n\nimport Model      from './model';\nimport { $on }    from './util';\nimport View       from './view';\nimport Controller from './controller';\nimport Router     from './routes';\n\nclass App {\n    \n    constructor() {\n        const model = new Model();\n        const view  = new View();\n        \n        this.controller = new Controller(model, view);\n        this.router     = new Router();\n    }\n    \n}\n\nconst app = new App();\n\n// event handler calls controller's 'setView' method with URI hash\nconst setView = () => {\n    app.controller.setView(document.location.hash);\n};\n\n// define routes\napp.router.add_route('/',          'home',      setView);\napp.router.add_route('/about',     'about',     setView);\napp.router.add_route('/contact',   'contact',   setView);\napp.router.add_route('/portfolio', 'portfolio', setView);\n\nconsole.log('routes from Main: ', app.router.routes);\n\n// register event listeners\n$on(window, 'load',       app.router.route);\n$on(window, 'hashchange', app.router.route);\n","/* jshint esversion:6, devel:true */\n\nimport { getJSON } from './service';\n\nexport default class Model {\n    \n    constructor() {\n    }\n    \n    /* fetch galleries\n    */\n    getGalleries() {\n        return getJSON('src/js/mock.json')\n            .then( galleries => galleries );\n    }\n    \n}","/* jshint esversion:6, browser:true, devel:true */\n\n/* ============================ utility methods ============================ */\n\nfunction parse_params(param_string) {\n    const input_params_arr = param_string.split('&');\n    const params = {};\n    let j = 0;\n    \n    input_params_arr.forEach( input_param => {\n        \n        // convert input param to array of key, value\n        const param = input_param.split('=');\n        \n        if (param.length === 2) {\n            \n            // if [key, value] then {key: value}\n            params[param[0]] = param[1];\n            \n        } else if (param.length === 1) {\n            \n            // else, {j: key}\n            params[j] = param[0];\n            j += 1;\n            \n        } else {\n            console.log('bad param - die!');\n        }\n        \n    });\n    \n    return params;\n}\n\n\n/* =========================== class definition ============================ */\n\nexport default class Router {\n    \n    constructor() {\n        this.routes = {};\n        this.element = document.getElementById('router-target');\n    }\n    \n    /* route registering function\n     *\n     * @param   [string]     path          [URL to route to]\n     * @param   [string]     template_id   [template for the route]\n     * @param   [function]   controller    [controller associated with route]\n    */\n    add_route(path, template_id, controller) {\n        this.routes[path] = {\n            template_id : template_id,\n            controller  : controller\n        };\n    }\n    \n    \n    /* router\n     *\n     * @param   [string]   url   [destination]\n    */\n    route() {\n        const hash_frag = location.hash.slice(1) || '/';\n        \n        // deal with query params\n        const route_pieces = hash_frag.split('?'),\n              base_route   = route_pieces[0],\n              route_split  = route_pieces.length,\n              params = (route_split > 1) ? parse_params(route_pieces[1]) : null;\n        \n        console.log('hash fragment: ', hash_frag);\n        console.log('route_pieces: ',  route_pieces);\n        console.log('route_split: ',   route_split);\n        console.log('params: ',        params);\n        \n        console.log('routes from Router.route: ', this.routes);\n              \n        // capture specific route object from 'routes'\n        let route = this.routes[base_route];\n        \n        if (this.element && route.controller) {\n            this.element.html(route.controller(params));\n        }\n    }\n    \n}\n","/* jshint esversion:6, browser:true */\n\nconst getJSON = (url) => {\n    const xhr = new XMLHttpRequest();\n    return new Promise( (resolve, reject) => {\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(JSON.parse(xhr.responseText));\n                } else {\n                    reject(xhr.responseText);\n                }\n            }\n        };\n        xhr.open('GET', url);\n        xhr.send();\n    });\n};\n\nexport { getJSON };\n","/* jshint esversion:6 */\n\n/* utility method for easy templating of repeating html elements\n *\n * @params  [array]  literalsArr   [array of all the literal secti\n * @params  [array]  ...cooked     [rest param: all the proccessed expressions]\n * @returns [string]               [the processed string]\n*/\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n    \n    cooked.forEach( (cook, indx) => {\n        let lit = literalsArr[indx];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\n/* generate gallery link\n*/\nconst gallery_link = (gallery) => html`\n    <div class=\"gallery-link\">\n        <a href=\"${gallery.link_url}\">\n            <div class=\"gallery-link-img\" style=\"background-image: url(${gallery.img_url})\"></div>\n            <div class=\"gallery-link-title\">\n                ${gallery.title}\n            </div>\n        </a>\n    </div>\n`;\n\n\n/* generate grid list of galleries\n*/\nconst gallery_list = (galleries) => html`\n    <div class=\"gallery-list\">\n        ${galleries.map( gallery => gallery_link(gallery) )}\n    </div>\n`;\n\nexport { gallery_list };\n","/* jshint esversion:6, browser:true */\n\n/* register handler to an event emitted by a target */\nconst $on = (target, event, handler) => {\n    return target.addEventListener(event, handler);\n};\n\nexport { $on };\n","/* jshint esversion:6, browser: true */\n\nimport { gallery_list } from './template';\n\nexport default class View {\n    \n    constructor() {\n        this.target = document.getElementById('target');\n    }\n    \n    render(data) {\n        this.target.innerHTML = gallery_list(data);\n        \n    }\n    \n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}