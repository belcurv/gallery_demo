{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/controllers/about.ctrl.js","src/js/controllers/contact.ctrl.js","src/js/controllers/gallery.ctrl.js","src/js/controllers/home.ctrl.js","src/js/controllers/portfolio.ctrl.js","src/js/main.js","src/js/router.js","src/js/routes.js","src/js/service.js","src/js/templates/about.tpl.js","src/js/templates/contact.tpl.js","src/js/templates/gallery.tpl.js","src/js/templates/home.tpl.js","src/js/templates/portfolio.tpl.js","src/js/util.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","aboutCtrl","el","template","data","console","log","innerHTML","contactCtrl","bindEvents","querySelectorAll","forEach","elem","_util","$on","clickHandler","evt","target","currentTarget","addPhotoModal","dataset","link","stopPropagation","body","document","querySelector","modal","createElement","image","className","setAttribute","appendChild","removePhotoModal","setTimeout","style","opacity","this","remove","_service","galleryCtrl","getJSON","then","gallery","homeCtrl","portfolioCtrl","galeries","_routes","app","App","_classCallCheck","getElementById","router","_router2","default","add_routes","routes","doRoute","route","window","Router","all_routes","path","controller","route_pieces","location","hash","slice","split","formatted_pcs","map","p","piece_count","sub_route","base_route","_homeCtrl","_homeTpl","_aboutCtrl","_aboutTpl","_contactCtrl","_contactTpl","_portfolioCtrl","_portfolioTpl","_galleryCtrl","_galleryTpl","home","homeTpl","about","aboutTpl","contact","contactTpl","portfolio","portfolioTpl","galleryTpl","url","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","topics","name","desc","ex","li","topic","html","_templateObject","_templateObject2","image_link","large","thumb","alt","title","description","images","gallery_link","link_url","img_url","galleries","event","handler","addEventListener","literalsArr","_len","arguments","cooked","Array","_key","result","cook","indx","lit","isArray","join"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,mECYSK,UAPT,SAAmBC,EAAIC,EAAUC,GAE7BC,QAAQC,IAAI,oCACZJ,EAAGK,UAAYJ,EAASC,4FCInBI,YAPT,SAAqBN,EAAIC,EAAUC,GAE/BC,QAAQC,IAAI,6BACZJ,EAAGK,UAAYJ,EAASC,yCCA5B,SAASK,EAAWP,GAChBA,EAAGQ,iBAAiB,oBACfC,QAAS,SAAAC,IACN,EAAAC,EAAAC,KAAIF,EAAM,QAASG,KAI/B,SAASA,EAAaC,GAEdA,EAAIC,SAAWD,EAAIE,eACnBC,EAAcH,EAAIC,OAAOG,QAAQC,MAGrCL,EAAIM,kBAIR,SAASH,EAAcE,GAGnB,IAAME,EAAQC,SAASC,cAAc,QAC/BC,EAAQF,SAASG,cAAc,OAC/BC,EAAQJ,SAASG,cAAc,OAGrCD,EAAMG,UAAY,cAClBD,EAAME,aAAa,MAAOT,GAG1BK,EAAMK,YAAYH,GAClBL,EAAKQ,YAAYL,IAGjB,EAAAb,EAAAC,KAAIY,EAAO,QAASM,GAGpBC,WAAW,WACPL,EAAMM,MAAMC,QAAU,KACvB,KAGP,SAASH,EAAiBhB,GAElBA,EAAIC,SAAWD,EAAIE,eACnBkB,KAAKC,SAGTrB,EAAIM,wFArDR,IAAAgB,EAAAhD,EAAA,cACAuB,EAAAvB,EAAA,aAmFSiD,YAhBT,SAAqBrC,EAAIC,EAAUC,IAI/B,EAAAkC,EAAAE,SAAA,kBAA0BpC,EAA1B,SACKqC,KAAM,SAAAC,GAEH,OADAxC,EAAGK,UAAYJ,EAASuC,GACjBxC,IAEVuC,KAAKhC,uHCnELkC,SAPT,SAAkBzC,EAAIC,EAAUC,GAE5BC,QAAQC,IAAI,yBACZJ,EAAGK,UAAYJ,EAASC,iHCN5B,IAAAkC,EAAAhD,EAAA,gBAcSsD,cAZT,SAAuB1C,EAAIC,EAAUC,GAEjCC,QAAQC,IAAI,+BACZD,QAAQC,IAAR,8BAA0CF,IAE1C,EAAAkC,EAAAE,SAAQ,oBACHC,KAAM,SAAAI,GACH3C,EAAGK,UAAYJ,EAAS0C,uJCTpC,IAAAhC,EAAAvB,EAAA,8DACAA,EAAA,aACAwD,EAAAxD,EAAA,YAWMyD,EAAM,IAPR,SAAAC,IAAcC,EAAAb,KAAAY,GACVZ,KAAKlC,GAAKsB,SAAS0B,eAAe,UAClCd,KAAKe,OAAS,IAAAC,EAAAC,SAQtBN,EAAII,OAAOG,WAAXR,EAAAS,QAGA,IAAMC,EAAU,WACZT,EAAII,OAAOM,MAAMV,EAAI7C,MAIzB,EAAAW,EAAAC,KAAI4C,OAAQ,OAAcF,IAC1B,EAAA3C,EAAAC,KAAI4C,OAAQ,aAAcF,qdCULG,aAEjB,SAAAA,IAAcV,EAAAb,KAAAuB,GACVvB,KAAKmB,uDAUEK,GAEP,IAAK,IAAIH,KAASG,EAAY,CAE1B,IAAI3E,EAAI2E,EAAWH,GAEnBrB,KAAKmB,OAAOtE,EAAE4E,OACV1D,SAAalB,EAAEkB,SACf2D,WAAa7E,EAAE6E,2CAUrB5D,GACF,IAGM6D,GAHYC,SAASC,KAAKC,MAAM,IAAM,KAGZC,MADV,KAEhBC,EAAgBL,EAAaM,IAAK,SAAAC,GAAA,MAAK,IAAMA,IAC7CC,EAAgBR,EAAajE,OAC7B0E,EAAgBT,EAAa,IAAM,GACnCU,EAAgBF,EAAc,EAAIH,EAAc,GAAKA,EAAc,GAAKA,EAAc,GAGxFX,EAAQrB,KAAKmB,OAAOkB,GAGnBhB,IAASA,EAAQrB,KAAKmB,OAAO,MAQ9BrD,GAAMuD,EAAMK,YACZL,EAAMK,WAAW5D,EAAIuD,EAAMtD,SAAUqE,sBAtD5Bb,wGCnCrB,IAAAe,EAAApF,EAAA,8BACAqF,EAAArF,EAAA,2BAEAsF,EAAAtF,EAAA,+BACAuF,EAAAvF,EAAA,4BAEAwF,EAAAxF,EAAA,iCACAyF,EAAAzF,EAAA,8BAEA0F,EAAA1F,EAAA,mCACA2F,EAAA3F,EAAA,gCAEA4F,EAAA5F,EAAA,iCACA6F,EAAA7F,EAAA,8BAEMiE,GAEF6B,MACIvB,KAAa,IACb1D,SAAAwE,EAAAU,QACAvB,WAAAY,EAAA/B,UAGJ2C,OACIzB,KAAa,SACb1D,SAAA0E,EAAAU,SACAzB,WAAAc,EAAA3E,WAGJuF,SACI3B,KAAa,WACb1D,SAAA4E,EAAAU,WACA3B,WAAAgB,EAAAtE,aAGJkF,WACI7B,KAAa,aACb1D,SAAA8E,EAAAU,aACA7B,WAAAkB,EAAApC,eAGJF,SACImB,KAAa,qBACb1D,SAAAgF,EAAAS,WACA9B,WAAAoB,EAAA3C,gBAKCgB,OAAAA,6ZChCAf,QAjBO,SAACqD,GACb,IAAMC,EAAM,IAAIC,eAChB,OAAO,IAAIC,QAAS,SAACC,EAASC,GAC1BJ,EAAIK,mBAAqB,WACE,IAAnBL,EAAIM,aACe,MAAfN,EAAIO,OACJJ,EAAQK,KAAKC,MAAMT,EAAIU,eAEvBN,EAAOJ,EAAIU,gBAIvBV,EAAIW,KAAK,MAAOZ,GAChBC,EAAIY,ugCCbZ7F,EAAAvB,EAAA,WAEMqH,IAEEC,KAAO,UACPC,KAAO,gVACPhB,IAAO,4EACPiB,GAAO,+IAGPF,KAAO,gBACPC,KAAO,uPACPhB,IAAO,sFACPiB,GAAO,oRAGPF,KAAO,kBACPC,KAAO,8PACPhB,IAAO,8FACPiB,GAAA,2fAGAF,KAAO,gBACPC,KAAO,kTACPhB,IAAO,8FACPiB,GAAA,gZAGAF,KAAO,mBACPC,KAAO,ieACPhB,IAAO,+GACPiB,GAAO,y1BAMTC,EAAK,SAACC,GAAD,OAAA,EAAAnG,EAAAoG,MAAAC,EAGWF,EAAMJ,KAAmBI,EAAMH,KAC7BG,EAAMnB,IAGLmB,EAAMF,OAgBtBvB,SARQ,SAACnF,GAAD,OAAA,EAAAS,EAAAoG,MAAAE,EAIPR,EAAOtC,IAAK,SAAA2C,GAAA,OAASD,EAAGC,w7FCxDlCnG,EAAAvB,EAAA,aAsCSmG,WAjCU,WAAA,OAAA,EAAA5E,EAAAoG,MAAAC,ioCCLnBrG,EAAAvB,EAAA,WAKM8H,EAAa,SAACxF,GAAD,OAAA,EAAAf,EAAAoG,MAAAC,EAEgCtF,EAAMyF,MACbzF,EAAM0F,MAGpC1F,EAAM2F,QAiBX3B,WATU,SAAClD,GAAD,OAAA,EAAA7B,EAAAoG,MAAAE,EACTzE,EAAQ8E,MACT9E,EAAQ+E,YAGP/E,EAAQgF,OAAOrD,IAAK,SAAAzC,GAAA,OAASwF,EAAWxF,iwCCxBlDf,EAAAvB,EAAA,aAaS+F,QARO,SAACjF,GAAD,OAAA,EAAAS,EAAAoG,MAAAC,yqCCLhBrG,EAAAvB,EAAA,WAKMqI,EAAe,SAACjF,GAAD,OAAA,EAAA7B,EAAAoG,MAAAC,EAEFxE,EAAQkF,SAE4BlF,EAAQmF,QAG7CnF,EAAQ8E,UAgBjB7B,aAPY,SAACmC,GAAD,OAAA,EAAAjH,EAAAoG,MAAAE,EAGXW,EAAUzD,IAAK,SAAA3B,GAAA,OAAWiF,EAAajF,4GCIxC5B,IA3BG,SAACG,EAAQ8G,EAAOC,GACxB,OAAO/G,EAAOgH,iBAAiBF,EAAOC,MA0B5Bf,KAhBD,SAACiB,GAA2B,IAAA,IAAAC,EAAAC,UAAAtI,OAAXuI,EAAWC,MAAAH,EAAA,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAXF,EAAWE,EAAA,GAAAH,UAAAG,GACrC,IAAIC,EAAS,GAWb,OATAH,EAAO1H,QAAS,SAAC8H,EAAMC,GACnB,IAAIC,EAAMT,EAAYQ,GAClBJ,MAAMM,QAAQH,KACdA,EAAOA,EAAKI,KAAK,KAErBL,GAAUG,EACVH,GAAUC,IAEdD,GAAUN,EAAYA,EAAYpI,OAAS","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* jshint esversion:6, devel: true */\n\n// expects (target element, template, params)\n// route.controller(el, route.template, hash_frag);\n\nfunction aboutCtrl(el, template, data) {\n    \n    console.log('AboutController > setView fired.');\n    el.innerHTML = template(data);\n    \n}\n\nexport { aboutCtrl };\n","/* jshint esversion:6, devel: true */\n\n// expects (target element, template, params)\n// route.controller(el, route.template, hash_frag);\n\nfunction contactCtrl(el, template, data) {\n    \n    console.log('Contact Controller fired.');\n    el.innerHTML = template(data);\n    \n}\n\nexport { contactCtrl };\n","/* jshint esversion:6, devel:true, browser:true */\n\nimport { getJSON } from '../service';\nimport { $on }     from '../util';\n\n/* ============================ private methods ============================ */\n\n\nfunction bindEvents(el) {\n    el.querySelectorAll('div.gallery-link')\n        .forEach( elem => {\n            $on(elem, 'click', clickHandler);\n        });\n}\n\nfunction clickHandler(evt) {\n    \n    if (evt.target !== evt.currentTarget) {\n        addPhotoModal(evt.target.dataset.link);\n    }\n    \n    evt.stopPropagation();\n    \n}\n\nfunction addPhotoModal(link) {\n\n    // create modal and image DOM elements\n    const body  = document.querySelector('body'),\n          modal = document.createElement('div'),\n          image = document.createElement('img');\n    \n    // affix styles and classes\n    modal.className = 'photo-modal';\n    image.setAttribute('src', link);\n    \n    // append children\n    modal.appendChild(image);\n    body.appendChild(modal);\n    \n    // bind click handler to modal click events\n    $on(modal, 'click', removePhotoModal);\n    \n    // fade in image\n    setTimeout(function() {\n        image.style.opacity = '1';\n    }, 100);\n}\n\nfunction removePhotoModal(evt) {\n    \n    if (evt.target === evt.currentTarget) {\n        this.remove();\n    }\n    \n    evt.stopPropagation();\n}\n\n\n/* ============================ public methods ============================= */\n\n/* Photo gallery controller.\n * Hits mock API & passes response JSON to template.\n * Also binds user input events.\n *\n * @param   [object]     el         [target DOM element object]\n * @param   [function]   template   [gallery templating function]\n * @param   [string]     data       [the hash sub-route from router.js]\n *\n*/\nfunction galleryCtrl(el, template, data) {\n    \n    /* ajax 'get' request to mock API response with a specific gallery name\n    */\n    getJSON(`server/gallery-${data}.json`)\n        .then( gallery => {\n            el.innerHTML = template(gallery);\n            return el;\n        })\n        .then(bindEvents);\n    \n}\n\n\n/* ================================ exports ================================ */\n\nexport { galleryCtrl };\n","/* jshint esversion:6, devel: true */\n\n// expects (target element, template, params)\n// route.controller(el, route.template, hash_frag);\n\nfunction homeCtrl(el, template, data) {\n    \n    console.log('HomeController fired.');\n    el.innerHTML = template(data);\n    \n}\n\nexport { homeCtrl };\n","/* jshint esversion:6, devel: true */\n\nimport { getJSON } from '../service';\n\nfunction portfolioCtrl(el, template, data) {\n    \n    console.log('Portfolio Controller fired.');\n    console.log(`Data passed to controller: ${data}`);\n        \n    getJSON('server/mock.json')\n        .then( galeries => {\n            el.innerHTML = template(galeries);\n    });\n    \n}\n\nexport { portfolioCtrl };\n","/* jshint esversion:6, browser:true */\n\nimport { $on }    from './util';\nimport Router     from './router';\nimport { routes } from './routes';\n\nclass App {\n    \n    constructor() {\n        this.el = document.getElementById('target');\n        this.router = new Router();\n    }\n    \n}\n\nconst app = new App();\n\n// register routes using imported `routes` object\napp.router.add_routes(routes);\n\n// event handler; calls router's 'route' method\nconst doRoute = () => {\n    app.router.route(app.el);\n};\n\n// register event listeners\n$on(window, 'load',       doRoute);\n$on(window, 'hashchange', doRoute);\n","/* jshint esversion:6, browser:true, devel:true */\n\n/* ============================ utility methods ============================ */\n\nfunction parse_params(param_string) {\n    const input_params_arr = param_string.split('&');\n    const params = {};\n    let j = 0;\n    \n    input_params_arr.forEach( input_param => {\n        \n        // convert input param to array of key, value\n        const param = input_param.split('=');\n        \n        if (param.length === 2) {\n            \n            // if [key, value] then {key: value}\n            params[param[0]] = param[1];\n            \n        } else if (param.length === 1) {\n            \n            // else, {j: key}\n            params[j] = param[0];\n            j += 1;\n            \n        } else {\n            console.log('bad param - die!');\n        }\n        \n    });\n    \n    return params;\n}\n\n\n/* =========================== class definition ============================ */\n\nexport default class Router {\n    \n    constructor() {\n        this.routes = {};\n    }\n    \n    /* route registering function\n     *\n     * @param   [object]    allRoutes\n     * @param   [string]      .path         [URL to route to]\n     * @param   [function]    .template     [template function]\n     * @param   [function]    .controller   [controller function]\n    */\n    add_routes(all_routes) {\n        \n        for (let route in all_routes) {\n            \n            let r = all_routes[route];\n            \n            this.routes[r.path] = {\n                template   : r.template,\n                controller : r.controller\n            };\n        }\n    }\n    \n    \n    /* router\n     *\n     * @param   [string]   el   [target DOM element for route content]\n    */\n    route(el) {\n        const hash_frag = location.hash.slice(1) || '/';\n        \n        const delimiter     = '/',\n              route_pieces  = hash_frag.split(delimiter),\n              formatted_pcs = route_pieces.map( p => '/' + p),\n              piece_count   = route_pieces.length,\n              sub_route     = route_pieces[3] || '',\n              base_route    = piece_count > 3 ? formatted_pcs[1] + formatted_pcs[2] : formatted_pcs[1];\n\n        // capture specific route object from 'routes'\n        let route = this.routes[base_route];\n        \n        // redirect to home on invalid route\n        if (!route) { route = this.routes['/']; }\n        \n//        console.log('======= Router Diagnostics =======');\n//        console.log('hash_frag    : ', hash_frag);\n//        console.log('route_pieces : ', route_pieces);\n//        console.log('base_route   : ', base_route);\n        \n        // if there's an element & controller, execute the route\n        if (el && route.controller) {\n            route.controller(el, route.template, sub_route);\n        }\n    }\n    \n}\n","/* jshint esversion:6 */\n\nimport { homeCtrl }      from './controllers/home.ctrl.js';\nimport { homeTpl }       from './templates/home.tpl.js';\n\nimport { aboutCtrl }     from './controllers/about.ctrl.js';\nimport { aboutTpl }      from './templates/about.tpl.js';\n\nimport { contactCtrl }   from './controllers/contact.ctrl.js';\nimport { contactTpl }    from './templates/contact.tpl.js';\n\nimport { portfolioCtrl } from './controllers/portfolio.ctrl.js';\nimport { portfolioTpl }  from './templates/portfolio.tpl.js';\n\nimport { galleryCtrl }   from './controllers/gallery.ctrl.js';\nimport { galleryTpl }    from './templates/gallery.tpl.js';\n\nconst routes = {\n    \n    home : {\n        path       : '/',\n        template   : homeTpl,\n        controller : homeCtrl\n    },\n    \n    about : {\n        path       : '/about',\n        template   : aboutTpl,\n        controller : aboutCtrl\n    },\n    \n    contact : {\n        path       : '/contact',\n        template   : contactTpl,\n        controller : contactCtrl\n    },\n    \n    portfolio : {\n        path       : '/portfolio',\n        template   : portfolioTpl,\n        controller : portfolioCtrl\n    },\n    \n    gallery : {\n        path       : '/portfolio/gallery',\n        template   : galleryTpl,\n        controller : galleryCtrl\n    }\n    \n};\n\nexport { routes };\n","/* jshint esversion:6, browser:true */\n\nconst getJSON = (url) => {\n    const xhr = new XMLHttpRequest();\n    return new Promise( (resolve, reject) => {\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(JSON.parse(xhr.responseText));\n                } else {\n                    reject(xhr.responseText);\n                }\n            }\n        };\n        xhr.open('GET', url);\n        xhr.send();\n    });\n};\n\nexport { getJSON };\n","/* jshint esversion:6 */\n\nimport { html } from '../util';\n\nconst topics = [\n    {\n        name : 'classes',\n        desc : 'JavaScript classes introduced in ECMAScript 2015 are primarily syntactical sugar over JavaScript\\'s existing prototype-based inheritance. The class syntax is not introducing a new object-oriented inheritance model to JavaScript. JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.',\n        url  : 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes',\n        ex   : '// main.js \\n \\nclass App {\\n    constructor() {\\n        this.el = document.getElementById(\\'target\\');\\n    }\\n}\\n\\nconst app = new App();'\n    },\n    {\n        name : 'import/export',\n        desc : 'The import statement is used to import functions, objects or primitives that have been exported from an external module, another script, etc. The export statement is used to export functions, objects or primitives from a given file (or module).',\n        url  : 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import',\n        ex   : '// portfolio.ctrl.js\\n\\nimport { getJSON } from \\'../service\\';\\n\\nfunction portfolioCtrl(el, template, data) {\\n\\n    getJSON(\\'server/mock.json\\')\\n        .then( galeries => {\\n            el.innerHTML = template(galeries);\\n        });\\n    }\\n\\nexport { portfolioCtrl };'\n    },\n    {\n        name : 'arrow functions',\n        desc : 'An arrow function expression has a shorter syntax than a function expression and does not bind its own this, arguments, super, or new.target. These function expressions are best suited for non-method functions, and they cannot be used as constructors.',\n        url  : 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions',\n        ex   : `// service.js\\n\\nconst getJSON = (url) => {\\n    const xhr = new XMLHttpRequest();\\n    return new Promise( (resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === 4) {\\n                if (xhr.status === 200) {\\n                    resolve(JSON.parse(xhr.responseText));\\n                } else {\\n                    reject(xhr.responseText);\\n                }\\n            }\\n        };\\n        xhr.open('GET', url);\\n        xhr.send();\\n    });\\n};\\n`\n    },\n    {\n        name : 'rest operator',\n        desc : 'The rest parameter syntax allows us to represent an indefinite number of arguments as an array. If the last named argument of a function is prefixed with ..., it becomes an array whose elements from 0 (inclusive) to theArgs.length (exclusive) are supplied by the actual arguments passed to the function.',\n        url  : 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters',\n        ex   : `// util.js\\n\\nconst html = (literalsArr, ...cooked) => {\\n    let result = '';\\n\\n    cooked.forEach( (cook, indx) => {\\n        let lit = literalsArr[indx];\\n        if (Array.isArray(cook)) {\\n            cook = cook.join('');\\n        }\\n        result += lit;\\n        result += cook;\\n    });\\n    result += literalsArr[literalsArr.length - 1];\\n    return result;\\n};\\n\\nexport { html };\\n`\n    },\n    {\n        name : 'tagged templates',\n        desc : 'A more advanced form of template literals are tagged template literals. Tags allow you to parse template literals with a function. The first argument of a tag function contains an array of string values. The remaining arguments are related to the expressions. In the end, your function can return your manipulated string (or it can return something completely different as described in the next example). The name of the function used for the tag can be named whatever you want.',\n        url  : 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals',\n        ex   : '// gallery.tpl.js\\n\\n// import html util\\nimport { html } from \\'../util\\';\\n\\n// generate gallery link\\nconst image_link = (image) => html\\`\\n    &ltdiv class=\"gallery-link Grid-cell\"&gt\\n        &ltdiv class=\"gallery-link-img\"\\n             data-link=\"\\${image.large}\"\\n             style=\"background-image: url(\\${image.thumb})\"&gt\\n        &lt/div&gt\\n        &ltdiv class=\"gallery-link-title\"&gt\\n            \\${image.alt}\\n        &lt/div&gt\\n    &lt/div&gt\\n\\`;\\n\\n\\n// generate grid list of galleries\\nconst galleryTpl = (gallery) =&gt html\\`\\n    &lth2&gt\\${gallery.title}&lt/h2&gt\\n    &ltp&gt\\${gallery.description}&lt/p&gt\\n    &ltdiv class=\"Grid Grid--gutters Grid--justifyCenter small-Grid--full\\n                med-Grid--1of2 large-Grid--1of3 gallery-list\"&gt\\n        \\${gallery.images.map( image =&gt image_link(image) )}\\n    &lt/div&gt\\n\\`;\\n'\n    }\n];\n\n/* generate topics list items\n*/\nconst li = (topic) => html`\n    <li>\n        <div class=\"definition\">\n            <strong>${topic.name}</strong> - ${topic.desc}\n            (<a href=\"${topic.url}\" target=\"_blank\"><em>MDN</em></a>)\n        </div>\n        <div class=\"example\">\n            <pre><code>${topic.ex}</code></pre>\n        </div>\n    </li>\n`;\n\n\n/* generate about view content\n*/\nconst aboutTpl = (data) => html`\n    <h1>About</h1>\n    <p>This app uses the following es2015 (es6) features and syntax:</p>\n    <ul>\n        ${topics.map( topic => li(topic))}\n    </ul>\n`;\n\nexport { aboutTpl };\n","/* jshint esversion:6 */\n\nimport { html } from '../util';\n\n\n/* generate gallery link\n*/\nconst contactTpl = () => html`\n    <h2>Fake Contact Form</h2>\n    \n    <h3>Fill out our contact form below to get in touch with us!</h3>\n    <form>\n        <div class=\"Grid Grid--gutters Grid--1of2\">\n            <div class=\"Grid-cell\">\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" id=\"name\" name=\"name\" value=\"\" placeholder=\"John Doe\" required=\"required\" autofocus=\"autofocus\" />\n\n                <label for=\"email\">Email Address:</label>\n                <input type=\"email\" id=\"email\" name=\"email\" value=\"\" placeholder=\"johndoe@example.com\" required=\"required\" />\n\n                <label for=\"telephone\">Telephone: </label>\n                <input type=\"tel\" id=\"telephone\" name=\"telephone\" value=\"\" />\n\n                <label for=\"enquiry\">Enquiry: </label>\n                <select id=\"enquiry\" name=\"enquiry\">\n                    <option value=\"general\">General</option>\n                    <option value=\"sales\">Hire Me</option>\n                </select>\n            </div>\n\n            <div class=\"Grid-cell\">\n                <label for=\"message\">Message:</label>\n                <textarea id=\"message\" name=\"message\" placeholder=\"Your message must be greater than 20 charcters\" required=\"required\" data-minlength=\"20\"></textarea>\n            </div>\n        </div>\n         \n        <button id=\"submit-button\">Submit</button>\n    </form>\n`;\n\nexport { contactTpl };\n","/* jshint esversion:6 */\n\nimport { html } from '../util';\n\n\n/* generate gallery link\n*/\nconst image_link = (image) => html`\n    <div class=\"gallery-link Grid-cell\">\n        <div class=\"gallery-link-img\" data-link=\"${image.large}\"\n             style=\"background-image: url(${image.thumb})\">\n        </div>\n        <div class=\"gallery-link-title\">\n            ${image.alt}\n        </div>\n    </div>\n`;\n\n\n/* generate grid list of galleries\n*/\nconst galleryTpl = (gallery) => html`\n    <h2>${gallery.title}</h2>\n    <p>${gallery.description}</p>\n    <div class=\"Grid Grid--gutters Grid--justifyCenter small-Grid--full\n                med-Grid--1of2 large-Grid--1of3 gallery-list\">\n        ${gallery.images.map( image => image_link(image) )}\n    </div>\n`;\n\nexport { galleryTpl };\n","/* jshint esversion:6 */\n\nimport { html } from '../util';\n\n\n/* generate gallery link\n*/\nconst homeTpl = (data) => html`\n    <h1>Welcome</h1>\n    <h2>This is a Photographer's Portfolio demo written in vanilla JavaScript</h2>\n    <p>Purpose: to demonstrate a MVC-style single page application with client-side routing that employs no frameworks or libraries.</p>\n    <p>The app uses syntax and methods that debuted in es2015, including <em>classes</em>, <em>import/export</em>, <em>arrow functions</em>, <em>the rest operator</em>, and <em>tagged templates</em>.</p>\n    <p>The source is available on GitHub - see link in the footer.</p>\n`;\n\nexport { homeTpl };\n","/* jshint esversion:6 */\n\nimport { html } from '../util';\n\n\n/* generate gallery link\n*/\nconst gallery_link = (gallery) => html`\n    <div class=\"gallery-link Grid-cell\">\n        <a href=\"${gallery.link_url}\">\n            <div class=\"gallery-link-img\"\n                        style=\"background-image: url(${gallery.img_url})\">\n            </div>\n            <div class=\"gallery-link-title\">\n                ${gallery.title}\n            </div>\n        </a>\n    </div>\n`;\n\n\n/* generate grid list of galleries\n*/\nconst portfolioTpl = (galleries) => html`\n    <div class=\"Grid Grid--gutters Grid--justifyCenter small-Grid--full\n                med-Grid--1of2 large-Grid--1of3 gallery-list\">\n        ${galleries.map( gallery => gallery_link(gallery) )}\n    </div>\n`;\n\nexport { portfolioTpl };\n","/* jshint esversion:6, browser:true */\n\n/* register handler to an event emitted by a target */\nconst $on = (target, event, handler) => {\n    return target.addEventListener(event, handler);\n};\n\n\n/* utility method for easy templating of repeating html elements\n *\n * @params  [array]  literalsArr   [array of all the literal secti\n * @params  [array]  ...cooked     [rest param: all the proccessed expressions]\n * @returns [string]               [the processed string]\n*/\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n    \n    cooked.forEach( (cook, indx) => {\n        let lit = literalsArr[indx];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\nexport { $on, html };\n"]}