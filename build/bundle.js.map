{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/controllers/about.ctrl.js","src/js/controllers/contact.ctrl.js","src/js/controllers/home.ctrl.js","src/js/controllers/portfolio.ctrl.js","src/js/main.js","src/js/router.js","src/js/routes.js","src/js/service.js","src/js/templates/about.tpl.js","src/js/templates/contact.tpl.js","src/js/templates/home.tpl.js","src/js/templates/portfolio.tpl.js","src/js/util.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* jshint esversion:6, devel: true */\n\n// expects (target element, template, params)\n// route.controller(el, route.template, hash_frag);\n\nfunction aboutCtrl(el, template, data) {\n    \n    console.log('AboutController > setView fired.');\n    el.innerHTML = template(data);\n    \n}\n\nexport { aboutCtrl };\n","/* jshint esversion:6, devel: true */\n\n// expects (target element, template, params)\n// route.controller(el, route.template, hash_frag);\n\nfunction contactCtrl(el, template, data) {\n    \n    console.log('Contact Controller fired.');\n    el.innerHTML = template(data);\n    \n}\n\nexport { contactCtrl };\n","/* jshint esversion:6, devel: true */\n\n// expects (target element, template, params)\n// route.controller(el, route.template, hash_frag);\n\nfunction homeCtrl(el, template, data) {\n    \n    console.log('HomeController fired.');\n    el.innerHTML = template(data);\n    \n}\n\nexport { homeCtrl };\n","/* jshint esversion:6, devel: true */\n\nimport { getJSON } from '../service';\n\nfunction portfolioCtrl(el, template, data) {\n    \n    console.log('Portfolio Controller fired.');\n        \n    getJSON('src/js/mock.json')\n        .then( galeries => {\n            el.innerHTML = template(galeries);\n    });\n    \n}\n\nexport { portfolioCtrl };\n","/* jshint esversion:6, browser:true */\n\n//import Model      from './model';\nimport { $on }    from './util';\n//import View       from './view';\n//import Controller from './controller';\nimport Router     from './router';\nimport { routes } from './routes';\n\nclass App {\n    \n    constructor() {\n        this.el = document.getElementById('target');\n        \n//        const model = new Model();\n//        const view  = new View();\n        \n//        this.controller = new Controller(model, view);\n        this.router     = new Router();\n        \n    }\n    \n}\n\nconst app = new App();\n\n// event handler calls controller's 'setView' method with URI hash\n//const setView = () => {\n//    app.controller.setView(document.location.hash);\n//};\n\n// define routes\napp.router.add_routes(routes);\n\n// event handler calls router's 'route' method\nconst doRoute = () => {\n    app.router.route(app.el);\n};\n\n// register event listeners\n$on(window, 'load',       doRoute);\n$on(window, 'hashchange', doRoute);\n","/* jshint esversion:6, browser:true, devel:true */\n\n/* ============================ utility methods ============================ */\n\nfunction parse_params(param_string) {\n    const input_params_arr = param_string.split('&');\n    const params = {};\n    let j = 0;\n    \n    input_params_arr.forEach( input_param => {\n        \n        // convert input param to array of key, value\n        const param = input_param.split('=');\n        \n        if (param.length === 2) {\n            \n            // if [key, value] then {key: value}\n            params[param[0]] = param[1];\n            \n        } else if (param.length === 1) {\n            \n            // else, {j: key}\n            params[j] = param[0];\n            j += 1;\n            \n        } else {\n            console.log('bad param - die!');\n        }\n        \n    });\n    \n    return params;\n}\n\n\n/* =========================== class definition ============================ */\n\nexport default class Router {\n    \n    constructor() {\n        this.routes = {};\n    }\n    \n    /** \n     * route registering function\n     *\n     * @param   [object]   allRoutes\n     *                       .path         [URL to route to]\n     *                       .template     [template function]\n     *                       .controller   [controller function]\n    */\n    add_routes(all_routes) {\n        \n        for (let route in all_routes) {\n            \n            let r = all_routes[route];\n            \n            this.routes[r.path] = {\n                template   : r.template,\n                controller : r.controller\n            };\n        }\n    }\n    \n    \n    /* router\n     *\n     * @param   [string]   url   [destination]\n    */\n    route(el) {\n        const hash_frag = location.hash.slice(1) || '/';\n        \n        // deal with query params\n        const route_pieces = hash_frag.split('?'),\n              base_route   = route_pieces[0],\n              route_split  = route_pieces.length,\n              params = (route_split > 1) ? parse_params(route_pieces[1]) : null;\n        \n        console.log('======= Router Diagnostics =======');\n        console.log('hash fragment : ', hash_frag);\n        console.log('route_pieces  : ', route_pieces);\n        console.log('route_split   : ', route_split);\n        console.log('params        : ', params);\n        \n        // capture specific route object from 'routes'\n        let route = this.routes[base_route];\n        \n        // redirect to home on invalid route\n        if (!route) { route = this.routes['/']; }\n        \n        // if there's an element & controller, execute the route\n        if (el && route.controller) {\n            route.controller(el, route.template, hash_frag);\n        }\n    }\n    \n}\n","/* jshint esversion:6 */\n\nimport { homeCtrl }      from './controllers/home.ctrl.js';\nimport { homeTpl }       from './templates/home.tpl.js';\n\nimport { aboutCtrl }     from './controllers/about.ctrl.js';\nimport { aboutTpl }      from './templates/about.tpl.js';\n\nimport { contactCtrl }   from './controllers/contact.ctrl.js';\nimport { contactTpl }    from './templates/contact.tpl.js';\n\nimport { portfolioCtrl } from './controllers/portfolio.ctrl.js';\nimport { gallery_list }  from './templates/portfolio.tpl.js';\n\nconst routes = {\n    \n    home : {\n        path       : '/',\n        template   : homeTpl,\n        controller : homeCtrl\n    },\n    \n    about : {\n        path       : '/about',\n        template   : aboutTpl,\n        controller : aboutCtrl\n    },\n    \n    contact : {\n        path       : '/contact',\n        template   : contactTpl,\n        controller : contactCtrl\n    },\n    \n    portfolio : {\n        path       : '/portfolio',\n        template   : gallery_list,\n        controller : portfolioCtrl\n    }\n    \n};\n\nexport { routes };\n","/* jshint esversion:6, browser:true */\n\nconst getJSON = (url) => {\n    const xhr = new XMLHttpRequest();\n    return new Promise( (resolve, reject) => {\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(JSON.parse(xhr.responseText));\n                } else {\n                    reject(xhr.responseText);\n                }\n            }\n        };\n        xhr.open('GET', url);\n        xhr.send();\n    });\n};\n\nexport { getJSON };\n","/* jshint esversion:6 */\n\n/* utility method for easy templating of repeating html elements\n *\n * @params  [array]  literalsArr   [array of all the literal secti\n * @params  [array]  ...cooked     [rest param: all the proccessed expressions]\n * @returns [string]               [the processed string]\n*/\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n    \n    cooked.forEach( (cook, indx) => {\n        let lit = literalsArr[indx];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\n/* generate gallery link\n*/\nconst aboutTpl = (data) => html`\n    <h2>About</h2>\n    <p>Lorem ipsum dolor sit amet, qui dico erat intellegebat an, at his munere erroribus mediocritatem. Equidem principes est ad, has ei vide diceret. Pro oblique posidonium repudiandae no, putent doctus ocurreret ex eam. Facer semper assueverit an mei, in nec altera nonumes veritus. His dolores invenire dissentiunt ei, eros tation sapientem nec ad, unum maiorum fierent ne ius. At harum aeterno vim, id dicam utroque pri, ne aperiam dissentias sed. Duo ad dolore voluptua, facer doctus placerat his no, mel an elit offendit.</p>\n\n    <p>Quas deleniti imperdiet ad sed, eam in mundi affert corrumpit. Ex eos utinam timeam consequat, duo et dico audiam vituperatoribus, eum cu tacimates mandamus ullamcorper. Cu admodum persequeris definitiones cum, eu his audiam complectitur. Appetere eloquentiam ex mel, summo ullamcorper vituperatoribus in vim, ut natum eripuit euismod cum. Ex eleifend conceptam cum, mei ei aeterno officiis mnesarchum.</p>\n\n    <p>Mei in debet aliquip. Id dictas tacimates voluptatibus eum, tollit suavitate expetendis te has, sea oblique dolorem ne. Te qui affert delectus mediocrem, te sed vidisse ponderum, modus nusquam probatus te sea. Nec id utamur periculis.</p>\n\n    <p>Bonorum iracundia inciderint pro eu, quo ei impedit partiendo tincidunt, odio dolores duo ne. Sea et eros fugit interesset, quo mucius efficiendi eloquentiam eu. Vis causae inermis reformidans ex. Sit te voluptua repudiare, eum tota ludus no, eu pro iudico inimicus.</p>\n\n    <p>Mea id solet equidem graecis, atqui assentior adipiscing ius id, eum scripserit dissentiet ea. Quo ne decore latine, eu homero vituperatoribus his, no falli graece vim. Novum facilisis ut mea, an cum probo legere dolorem, omnium dolores accusamus eum te. Rebum gloriatur qui ea, augue posidonium per in. In impedit facilis deseruisse vim.</p>\n`;\n\nexport { aboutTpl };\n","/* jshint esversion:6 */\n\n/* utility method for easy templating of repeating html elements\n *\n * @params  [array]  literalsArr   [array of all the literal secti\n * @params  [array]  ...cooked     [rest param: all the proccessed expressions]\n * @returns [string]               [the processed string]\n*/\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n    \n    cooked.forEach( (cook, indx) => {\n        let lit = literalsArr[indx];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\n/* generate gallery link\n*/\nconst contactTpl = () => html`\n    <h2>Contact</h2>\n    \n    <h3>Fill out our contact form below to get in touch with us!</h3>\n    <form>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" value=\"\" placeholder=\"John Doe\" required=\"required\" autofocus=\"autofocus\" />\n         \n        <label for=\"email\">Email Address:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" value=\"\" placeholder=\"johndoe@example.com\" required=\"required\" />\n         \n        <label for=\"telephone\">Telephone: </label>\n        <input type=\"tel\" id=\"telephone\" name=\"telephone\" value=\"\" />\n         \n        <label for=\"enquiry\">Enquiry: </label>\n        <select id=\"enquiry\" name=\"enquiry\">\n            <option value=\"general\">General</option>\n            <option value=\"sales\">Hire Me</option>\n        </select>\n         \n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" placeholder=\"Your message must be greater than 20 charcters\" required=\"required\" data-minlength=\"20\"></textarea>\n         \n        <input type=\"submit\" value=\"Submit\" id=\"submit-button\" />\n    </form>\n`;\n\nexport { contactTpl };\n","/* jshint esversion:6 */\n\n/* utility method for easy templating of repeating html elements\n *\n * @params  [array]  literalsArr   [array of all the literal secti\n * @params  [array]  ...cooked     [rest param: all the proccessed expressions]\n * @returns [string]               [the processed string]\n*/\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n    \n    cooked.forEach( (cook, indx) => {\n        let lit = literalsArr[indx];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\n/* generate gallery link\n*/\nconst homeTpl = (data) => html`\n    <h2>Welcome</h2>\n    \n    <h3>This is a Photo Gallery App written in vanilla ES6 JavaScript</h3>\n    <p>If you can read this, the app router sent you to the home page.</p>\n\n    <a href=\"#/about\">About</a>\n    <a href=\"#/contact\">Contact</a>\n    <a href=\"#/portfolio\">Portfolio</a>\n`;\n\nexport { homeTpl };\n","/* jshint esversion:6 */\n\n/* utility method for easy templating of repeating html elements\n *\n * @params  [array]  literalsArr   [array of all the literal secti\n * @params  [array]  ...cooked     [rest param: all the proccessed expressions]\n * @returns [string]               [the processed string]\n*/\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n    \n    cooked.forEach( (cook, indx) => {\n        let lit = literalsArr[indx];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\n/* generate gallery link\n*/\nconst gallery_link = (gallery) => html`\n    <div class=\"gallery-link\">\n        <a href=\"${gallery.link_url}\">\n            <div class=\"gallery-link-img\" style=\"background-image: url(${gallery.img_url})\"></div>\n            <div class=\"gallery-link-title\">\n                ${gallery.title}\n            </div>\n        </a>\n    </div>\n`;\n\n\n/* generate grid list of galleries\n*/\nconst gallery_list = (galleries) => html`\n    <div class=\"gallery-list\">\n        ${galleries.map( gallery => gallery_link(gallery) )}\n    </div>\n`;\n\nexport { gallery_list };\n","/* jshint esversion:6, browser:true */\n\n/* register handler to an event emitted by a target */\nconst $on = (target, event, handler) => {\n    return target.addEventListener(event, handler);\n};\n\nexport { $on };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}